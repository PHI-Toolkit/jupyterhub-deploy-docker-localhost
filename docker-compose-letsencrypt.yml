# Copyright (c) Jupyter Development Team.
# Distributed under the terms of the Modified BSD License.

# JupyterHub docker-compose configuration file
version: "3"

services:

  hub-db:
    build:
      context: .
      dockerfile: server_apps/postgres-hub/Dockerfile.postgres
      args:
        JPY_PSQL_PASSWORD: ${JPY_PSQL_PASSWORD}
        POSTGRES_VERSION: ${POSTGRES_VERSION}
    image: postgres-hub
    container_name: jupyterhub-db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: ${DB_VOLUME_CONTAINER}
      JPY_PSQL_PASSWORD: ${JPY_PSQL_PASSWORD}
      POSTGRES_PASSWORD: ${JPY_PSQL_PASSWORD}
    env_file:
      - .env
    volumes:
      - "db:${DB_VOLUME_CONTAINER}"

  nginx-proxy:
    build:
      context: nginx-proxy/
      dockerfile: Dockerfile.alpine
    image: nginxproxy
    ports:
      - "80:80"
    container_name: nginxproxy
    restart: always
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
      - "./secrets:/etc/nginx/certs:rw"
      - "nginx_vhostd:/etc/nginx/vhost.d:rw"
      - "nginx_html:/usr/share/nginx/html:rw"
    #logging:
    #    driver: syslog
    #    options:
    #      syslog-address: "udp://192.168.50.128:514"
    #      tag: docker/nginx-proxy
  letsencrypt:
    depends_on:
      - nginxproxy
    build:
      context: server_apps/letsencrypt
      dockerfile: Dockerfile
    restart: always
    image: letsencrypt
    container_name: letsencrypt
    environment:
      DEFAULT_EMAIL: herman.tolentino@gmail.com
      NGINX_PROXY_CONTAINER: nginxproxy
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./secrets:/etc/nginx/certs:rw"
      - "nginx_vhostd:/etc/nginx/vhost.d:rw"
      - "nginx_html:/usr/share/nginx/html:rw"

  hub:
    #depends_on:
    #  - hub-db
    hostname: jupyterhub
    build:
      context: .
      dockerfile: Dockerfile.jupyterhub
      args:
        JUPYTERHUB_VERSION: ${JUPYTERHUB_VERSION}
        JUPYTER_UI: ${JUPYTER_UI}
        LOGO_IMAGE: ${LOGO_IMAGE}
    restart: always
    image: jupyterhub
    container_name: jupyterhub
    volumes:
      # Bind Docker socket on the host so we can connect to the daemon from
      # within the container
      - "/var/run/docker.sock:/var/run/docker.sock:rw"
      # Bind Docker volume on host for JupyterHub database and cookie secrets
      - "data:${DATA_VOLUME_CONTAINER}"
      - "./secrets:/srv/jupyterhub/secrets"
    ports:
      - "443:443"
      - "8000:8000"
    #links:
    #  - hub-db
    env_file:
      - .env
    environment:
      # All containers will join this network
      DOCKER_NETWORK_NAME: ${DOCKER_NETWORK_NAME}
      # JupyterHub will spawn this Notebook image for users
      DOCKER_NOTEBOOK_IMAGE: ${LOCAL_NOTEBOOK_IMAGE}
      # Notebook directory inside user image
      DOCKER_NOTEBOOK_DIR: ${DOCKER_NOTEBOOK_DIR}
      # Using this run command (optional)
      DOCKER_SPAWN_CMD: ${DOCKER_SPAWN_CMD}
      JUPYTERHUB_SERVICE_HOST_IP: ${JUPYTERHUB_SERVICE_HOST_IP}
      # Server time out
      SERVER_TIMEOUT_SECONDS: ${SERVER_TIMEOUT_SECONDS}
      # Postgres db info
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: hub-db
      LETSENCRYPT_HOST: ${JH_FQDN}
      LETSENCRYPT_EMAIL: ${JH_EMAIL}
      VIRTUAL_HOST: ${JH_FQDN}
      VIRTUAL_PORT: 443
    # option 1: default command
    command: >
      jupyterhub --ip=0.0.0.0 -f /srv/jupyterhub/jupyterhub_config.py --log-level=${JUPYTERHUB_LOG_LEVEL}
    # option 2: to upgrade jupyterhub db (if postgres), uncomment 2 lines below
    #command: >
    #  jupyterhub upgrade-db

volumes:
  data:
    external:
      name: ${DATA_VOLUME_HOST}
  db:
    external:
      name: ${DB_VOLUME_HOST}
  nginx_vhostd:
    external:
      name: nginx_vhostd
  nginx_html:
    external:
      name: nginx_html

networks:
  default:
    external:
      name: ${DOCKER_NETWORK_NAME}
