# Copyright (c) Jupyter Development Team.
# Distributed under the terms of the Modified BSD License.

# Use this file to set default values for environment variables specified in
# docker-compose configuration file.  docker-compose will substitute these
# values for environment variables in the configuration file IF the variables
# are not set in the shell environment.

# Revision Date: 2020-11-29

# Docker Build Kit for Docker and docker-compose
# To use cache for Docker build remove '--no-cache' from DOCKER_BUILD_CACHE_OPTION=
# To see output of RUN commands use 'plain' for BUILDKIT_PROGRESS. Default is 'auto'.
DOCKER_BUILDKIT=1
BUILDKIT_PROGRESS=plain
COMPOSE_DOCKER_CLI_BUILD=1
DOCKER_BUILD_CACHE_OPTION=--no-cache
COMPOSE_IGNORE_ORPHANS=True ## suppresses orphan warning during build

# Installation user = Linux user
INSTALL_USER=herman
NB_USER="jovyan"
NB_UID="1000"
NB_GID="100"

# To override these values, set the shell environment variables.
# Note: Wildcard (*) cannot be used for JUPYTERHUB_VERSION, CONDA_VERSION
#   and PYTHON_VERSION.
JUPYTERHUB_VERSION=1.4.2
JUPYTERLAB_VERSION=3.1.11
NOTEBOOK_VERSION=6.4*
CONDA_VERSION=4.10.1
PYTHON_VERSION=3.9
PLOTLY_VERSION=5.3.1

# Generate self-signed cert for Jupyter Notebook server
GEN_CERT=1

# To get the value for IP address, run 'get_service_host_ip.sh' to
#  get the IP address to replace the placeholder text below.
#  or just run 'buildhub.sh' to automatically replace it.
JUPYTERHUB_SERVICE_HOST_IP=REPLACE_IP

# Authenticator choices:
# 1. dummy_authenticator (user: jovyan, password: geeks@localhost)
# 2. tmp_authenticator
# 3. hash_authenticator
# 4. native_authenticator
# 5. github_authenticator (create GitHub account, add GitHub 'userid' to 'userlist' file)
JUPYTERHUB_AUTHENTICATOR=dummy_authenticator

# Dummy Authenticator Variables (if using dummy_authenticator)
# Replace this default password (recommended)
DUMMY_AUTH_PASSWORD=geeks@localhost

# For production use, authorize_signup to authorize users who sign up
# Native authenticator options: open_signup / authorize_signup
NATIVEAUTH_SIGNUP=open_signup
NATIVEAUTH_EMAIL=yes

# Allow named servers (yes/no)
# Allows setting up of more than 1 servers up to specified maximum below for each user
ALLOW_NAMED_SERVERS=no
NAMED_SERVERS_MAX=2

# JUPYTERHUB_DB_URL choices:
# 1. sqlite
# 2. postgres (default)
JUPYTERHUB_DB_URL='postgres'

# IF USING GITHUB AUTHENTICATOR, GET GITHUB CREDENTIALS
# 1. Obtain GitHub OAuth credentials from https://github.com/settings/developers
# 2. Replace the values below for your domain
GITHUB_CLIENT_ID=
GITHUB_CLIENT_SECRET=
OAUTH_CALLBACK_URL=https://localhost/hub/oauth_callback

# This is the GitHub Access token.
# Generate token: https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/
GITHUB_ACCESS_TOKEN=

# User interface choices
# 1. /lab: Jupyter Lab (Beta) -  New UI (note slash before lab)
# 2. notebook: Jupyter Notebook (Traditional, DEFAULT) - has Jupyter Notebook Widgets (including NB Translator)
JUPYTER_UI=notebook

# Options:
# 'use_ssl_ss' - USE SSL, generate self-signed certificate (https://localhost)
# 'use_ssl_le' - USE SSL, generate LetsEncrypt certifications (need to fill .env LetsEncryp variables below)
# 'no_ssl' - http://localhost:8000 (deprecated)
# run 'create_certs.sh' to certificate (self-signed or letsencrypt)
JUPYTERHUB_SSL=use_ssl_ss

# LetsEncrypt variables, for 'use_ssl_le' above
# JH_FQDN - fully qualified domain name, e.g., example.com
# JH_EMAIL - email address to use for LetsEncrypt
# CERT_SERVER -  set this from '--staging' while testing cert generation to avoid lockdown
#                to '' for production
CERT_SERVER='--staging'
JH_FQDN=
JH_EMAIL=

# JupyterHub Log Level
# Options:
# 1. DEBUG (most information)
# 2. INFO
# 3. WARN
# 4. ERROR
# 5. CRITICAL (least information)
JUPYTERHUB_LOG_LEVEL=INFO

# Name of Docker machine
DOCKER_MACHINE_NAME=jupyterhub

# Name of Docker network
DOCKER_NETWORK_NAME=jupyterhubnet

# Single-user Jupyter Notebook server container image

# Tags are from https://hub.docker.com/r/jupyter/minimal-notebook/tags/
IMAGE_TAG=31b807ec9e83 # for minimal-notebook
#IMAGE_TAG=ad3574d3c5c7 # for minimal-notebook (older)
#IMAGE_TAG=7a0c7325e470 # for scipy-notebook
#IMAGE_TAG=notebook-6.1.4 # for datascience-notebook

# Copy relevant Python and R sections are from docker-stacks Dockerfiles
#DOCKER_NOTEBOOK_BASE=jupyter/nvidia-minimal-notebook
DOCKER_NOTEBOOK_BASE=jupyter/minimal-notebook:${IMAGE_TAG}

# Pick from one Dockerfile below, uncomment your preference.
# After changing a preference, be sure to run 'make notebook_body'
# 1. Dockerfile.python
# 2. Dockerfile.custom
DOCKERFILE_BODY=Dockerfile.python

# Use the variables below for vanilla Dockerfiles from jupyter stacks.
# https://github.com/jupyter/docker-stacks
#DOCKER_NOTEBOOK_IMAGE=jupyter/datascience-notebook:${IMAGE_TAG}
#DOCKERFILE_BODY=Dockerfile.stacks

# This multi-stage build Dockerfile reduces Docker image size
DOCKERFILE_MULTISTAGE=Dockerfile.multistage

# Password for single-user notebook $NB_USER = jovyan
# You can change the password below to your preferred one (recommended)
# If this is empty ("") it will also enable passwordless sudo.
NB_USER_PASS=P@55w0rd!G33ks

# The final Docker image before multi-stage build
LOCAL_NOTEBOOK_IMAGE=phitoolkit/jupyterhub-user

# The packed, smaller Docker image
LOCAL_NOTEBOOK_PACKED=phitoolkit/packed

# Notebook directory in the container.
# This will be /home/jovyan/work if the default
# This directory is stored as a docker volume for each user
DOCKER_NOTEBOOK_DIR=/home/jovyan/work

# Docker run command to use when spawning single-user containers
DOCKER_SPAWN_CMD=start-singleuser.sh

# Name of JupyterHub container data volume
DATA_VOLUME_HOST=jupyterhub-data

# Data volume container mount point
DATA_VOLUME_CONTAINER=/data

# POSTGRES SECTION
# This section only applies to set up with an external database.
# The default database set up is sqlite.
# Name of JupyterHub postgres database data volume
DB_VOLUME_HOST=jupyterhub-db-data

# Postgres volume container mount point
DB_VOLUME_CONTAINER=/var/lib/postgresql/data/jupyterhub

# The name of the postgres database containing JupyterHub state
POSTGRES_DB=jupyterhub

# Add a PostgreSQL password below by copying the result of "openssl rand -hex 32" as password.
POSTGRES_PASSWORD=REPLACE_PG_PASS
JPY_PSQL_PASSWORD=REPLACE_PG_PASS

# Delete PostGreSQL data volume on build
# Default: 1 (true)
POSTGRES_DELETE_DB=1

# JupyterHub PostGRESQL version
POSTGRES_VERSION=10.6

# END OF POSTGRES SECTION

# Add a proxy auth token by copying the result of `openssl rand -hex 32`as the token.
CONFIGPROXY_AUTH_TOKEN=REPLACE_TOKEN

# Notebook server time out - Jupyter Hub culling services
# default 3600 seconds = 1 hour
# 86,400 seconds = 24 hours
# 604,800 seconds = 7 days
# 1,209,600 seconds = 14 days
SERVER_TIMEOUT_SECONDS=3600

# nginx-proxy vars
VIRTUAL_HOST=localhost
VIRTUAL_PORT=8000

# DOCKER EXECUTABLE
# 'docker' or 'nvidia-docker' (if nvidia-docker and
#   CUDA drivers are available)
DOCKER_EXEC=docker

# NOTEBOOK AND HUB LOGO
# changes default logo
LOGO_IMAGE=geeks.png

# Docker images
# Do not alter this section.
LOCAL_NOTEBOOK_BASE=phitoolkit/notebook-base
DOCKERFILE_BASE=/Dockerfile.base
LOCAL_NOTEBOOK_BODY=phitoolkit/notebook-body
DOCKERFILE_TAIL=Dockerfile.tail

# Mapbox API token
MAPBOX_API_KEY=
NEO4J_PASSWORD=geeks@localhost
